
@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Vue 测试实例 - 菜鸟教程(runoob.com)</title>
    @*<script src="https://cdn.bootcss.com/vue/2.4.2/vue.min.js"></script>
        <script src="https://cdn.bootcss.com/vue-router/2.7.0/vue-router.min.js"></script>*@
    <script src="~/Js/vue.min.js"></script>
    <script src="~/Js/vue.Router.js"></script>
    <script src="https://cdn.bootcss.com/vue-resource/1.5.1/vue-resource.min.js"></script><!--使用ajax时需要使用 -->
</head>
<body>
    <div id="app">
        <h1>Hello App!</h1>
        <p>
            <!-- 使用 router-link 组件来导航. -->
            <!-- 通过传入 `to` 属性指定链接. -->
            <!-- <router-link> 默认会被渲染成一个 `<a>` 标签 -->
            <router-link to="/foo">Go to Foo</router-link>
            <router-link to="/bar">Go to Bar</router-link>
        </p>


        <!-- 字符串 -->
        <router-link to="home">Home</router-link>
        <!-- 渲染结果 -->
        <a href="home">Home</a>

        <!-- 使用 v-bind 的 JS 表达式 -->
        <router-link v-bind:to="'home'">Home</router-link>

        <!-- 不写 v-bind 也可以，就像绑定别的属性一样 -->
        <router-link :to="'home'">Home</router-link>

        <!-- 同上 -->
        <router-link :to="{ path: 'home' }">Home</router-link>

        <!-- 命名的路由 -->
        <router-link :to="{ name: 'user', params: { userId: 123 }}">User</router-link>

        <!-- 带查询参数，下面的结果为 /register?plan=private -->
        <router-link :to="{ path: 'register', query: { plan: 'private' }}">Register</router-link>

        <!--设置 replace 属性的话，当点击时，会调用 router.replace() 而不是 router.push()，导航后不会留下 history 记录 -->
        <router-link :to="{path:'/abc'}" replace></router-link>

        <!--append设置 append 属性后，则在当前 (相对) 路径前添加基路径。例如，我们从 /a 导航到一个相对路径 b，如果没有配置 append，则路径为 /b，如果配了，则为 /a/b-->
        <router-link :to="{ path: 'relative/path'}" append></router-link>

        <!--有时候想要 <router-link> 渲染成某种标签，例如 <li>。 于是我们使用 tag prop 类指定何种标签，同样它还是会监听点击，触发导航。 --> 
        <router-link to="/foo" tag="li">foo</router-link>

        <!--设置 链接激活时使用的 CSS 类名。可以通过以下代码来替代 -->
        <router-link v-bind:to="{ path: '/route1'}" active-class="_active">Router Link 1</router-link>
        <router-link v-bind:to="{ path: '/route1'}" exact-active-class="_active">Router Link 1</router-link> <!--配置当链接被精确匹配的时候应该激活的 class。可以通过以下代码来替代。 -->

        <!-- 声明可以用来触发导航的事件。可以是一个字符串或是一个包含字符串的数组,下面代码设置了 event 为 mouseover ，及在鼠标移动到 Router Link 1 上时导航的 HTML 内容会发生改变 -->
        <router-link v-bind:to="{ path: '/route1'}" event="mouseover">Router Link 1</router-link>



        <!-- 路由出口 -->
        <!-- 路由匹配到的组件将渲染在这里 -->
        <router-view>

        </router-view>
    </div>

    <script>
        // 0. 如果使用模块化机制编程，導入Vue和VueRouter，要调用 Vue.use(VueRouter)

        // 1. 定义（路由）组件。
        // 可以从其他文件 import 进来
        const Foo = { template: '<div>foo</div>' }
        const Bar = { template: '<div>bar</div>' }

        

        // 4. 创建和挂载根实例。
        // 记得要通过 router 配置参数注入路由，
        // 从而让整个应用都有路由功能
        const app = new Vue({
                router :new VueRouter({
                    routes: [
                        { path: '/foo', component: Foo },//路由转到组件
                        { path: '/bar', component: Bar }
                    ]
                }),
                methods: {
                    get: function () {
                        //发送get请求
                        this.$http.get('/try/ajax/ajax_info.txt').then(function (res) {
                            document.write(res.body);
                        }, function () {
                            console.log('请求失败处理');
                        });
                    }
                }
            }).$mount('#app')
            
           // $mount：手动挂载,当Vue实例没有el属性时，则该实例尚没有挂载到某个dom中，可以通过此种方式实现延时挂载
    </script>
</body>
</html>
