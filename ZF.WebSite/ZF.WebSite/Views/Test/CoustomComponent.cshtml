@{
    Layout = null;
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>菜鸟教程(runoob.com)</title>
    @*<script src="~/Js/jquery-2.2.3.min.js"></script>*@
    <script src="~/Js/vue.min.js"></script>
    <style>
        .class1 {
            background-color: red;
        }
    </style>
</head>
<body>
    <div id="app">
        <customcomponent></customcomponent>
        <runoob></runoob>
        <child message="hello!"></child>


        @* 动态Prop传值 *@
        <input v-model="parentMsg">
        <br>
        <child v-bind:message="parentMsg"></child>


        @* 动态绑定列表并遍历 *@
        <ol>
            <todo-item v-for="item in sites" v-bind:todo="item"></todo-item>
        </ol>
    </div>


        <div id="counter-event-example">
            <p>{{ total }}</p>
            <button-counter v-on:increment="incrementTotal"></button-counter>
            <button-counter v-on:increment="incrementTotal"></button-counter>
        </div>



    <script>
        //全局注册自定义组件 组件名称只支持全部小写
        Vue.component('customcomponent', {
            template: '<h1>自定义全局组件!</h1>'
        })

        // 注册
        Vue.component('child', {
            // 声明 props
            props: ['message'],
            // 同样也可以在 vm 实例中像 "this.message" 这样使用
            template: '<span>{{ message }}</span>'
        })

        ///组件--遍历数组列表
        Vue.component('todo-item', {
            props: ['todo'],
            template: '<li>{{ todo.text }}</li>'
        })

        ///局部组件
        var Child = {
            template: '<h1>自定义局部组件!</h1>'
        }


        ///Prop验证
        Vue.component('example', {
            props: {
                // 基础类型检测 （`null` 意思是任何类型都可以）
                propA: Number,
                // 多种类型
                propB: [String, Number],
                // 必传且是字符串
                propC: {
                    type: String,
                    required: true
                },
                // 数字，有默认值
                propD: {
                    type: Number,
                    default: 100
                },
                // 数组／对象的默认值应当由一个工厂函数返回
                propE: {
                    type: Object,
                    default: function () {
                        return { message: 'hello' }
                    }
                },
                // 自定义验证函数
                propF: {
                    validator: function (value) {
                        return value > 10
                    }
                }
            }
        })

        //父组件是使用 props 传递数据给子组件，但如果子组件要把数据传递回去，就需要使用自定义事件！

        //type 可以是以下原生验证
        //String
        //Number
        //Boolean
        //Function
        //Object
        //Array

        //使用 $on(eventName) 监听事件
        //使用 $emit(eventName) 触发事件



         //创建根实例
        var app = new Vue({
            el: '#app',
            components: {
                // <runoob> 将只在父模板可用
                'runoob': Child,
            },
            data: {
                parentMsg: '父组件内容', 
                sites: [
                  { text: 'Runoob' },
                  { text: 'Google' },
                  { text: 'Taobao' }
                ]
            },
            methods: {

            },
            watch: {

            }
        });



        Vue.component('button-counter', {
            template: '<button v-on:click="incrementHandler">{{ counter }}</button>',
            data: function () {
                return {
                    counter: 0
                }
            },
            incrementHandler: function () {
            methods: {
                    this.counter += 1
                    this.$emit('increment')
                }
            },
        })
      var app2=  new Vue({
            el: '#counter-event-example',
            data: {
                total: 0
            },
            methods: {
                incrementTotal: function () {
                    this.total += 1
                }
            }
        })

    </script>
</body>
</html>

